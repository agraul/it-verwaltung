{"version":3,"sources":["webpack:///./src/app/core/api-client.service.ts"],"names":[],"mappings":"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","file":"default~config-config-module~device-device-module.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { environment } from '../../environments/environment';\nimport { Deliverer } from '../fe-entities/deliverer.entity';\nimport { DeviceAttribute } from '../fe-entities/device-attibute.entity';\nimport { DeviceType } from '../fe-entities/device-type.entity';\nimport { Device } from '../fe-entities/device.entity';\nimport { Roles } from '../fe-entities/roles.entity';\nimport { Room } from '../fe-entities/room.entity';\nimport { User } from '../fe-entities/user.entity';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiClientService {\n  constructor(private httpClient: HttpClient) { }\n\n  public getAllRooms(): Promise<Room[]> {\n    if (environment.isMock) {\n      return Promise.resolve([\n        {\n          id: 1,\n          nr: '123',\n          bezeichnung: 'Computerraum',\n          hat_notiz: true,\n          komponenten_arten: ['PC', 'Beamer', 'Switch']\n        },\n        {\n          id: 2,\n          nr: '022',\n          bezeichnung: 'Computerraum',\n          hat_notiz: false,\n          komponenten_arten: null\n        },\n        {\n          id: 3,\n          nr: '324',\n          bezeichnung: 'Elektro',\n          hat_notiz: true,\n          komponenten_arten: ['PC', 'Beamer']\n        }\n      ]);\n    }\n    return this.httpClient.get<Room[]>(environment.url + '/room/all').toPromise();\n  }\n\n  public getAllGroups(): Observable<Roles[]> {\n    if (environment.isMock) {\n      return of([\n        {\n          id: 1,\n          bezeichnung: 'Lehrkraft',\n          privilegiert: false\n        },\n        {\n          id: 2,\n          bezeichnung: 'Systembetreuer',\n          privilegiert: true\n        }\n      ]);\n    } else {\n      return this.httpClient.get<Roles[]>(environment.url + '/group/all');\n    }\n  }\n\n  public getAllUser(): Promise<User[]> {\n    if (environment.isMock) {\n      return Promise.resolve([\n        {\n          userid: 1,\n          username: 'ln@b3.de',\n          lastname: 'Nürnberger',\n          firstname: 'Lukas',\n          groupid: 2,\n          pw: '123'\n        }\n      ]);\n    } else {\n      return this.httpClient\n        .get<User[]>(environment.url + '/user/all')\n        .toPromise();\n    }\n  }\n\n  public setUserPassword(body: any): Promise<void> {\n    if (environment.isMock) {\n      return Promise.resolve();\n    } else {\n      return this.httpClient\n        .post<void>(environment.url + '/user/setpassword', body)\n        .toPromise();\n    }\n  }\n\n  public setUserGroupChange(body: any): Promise<void> {\n    if (environment.isMock) {\n      return Promise.resolve();\n    } else {\n      return this.httpClient\n        .post<void>(environment.url + '/user/changegroup', body)\n        .toPromise();\n    }\n  }\n\n  public deleteUser(id: number): Promise<void> {\n    if (environment.isMock) {\n      return Promise.resolve();\n    } else {\n      return this.httpClient\n        .get<void>(environment.url + '/user/delete?id=' + id)\n        .toPromise();\n    }\n  }\n\n  public registerUser(body: any): Promise<any> {\n    if (environment.isMock) {\n      return Promise.resolve();\n    } else {\n      return this.httpClient\n        .post<any>(environment.url + '/user/register', body)\n        .toPromise();\n    }\n  }\n\n  public getAllDeliverer(): Promise<Deliverer[]> {\n    if (environment.isMock) {\n      return Promise.resolve([\n        {\n          id: 1,\n          companyname: 'Tall Software',\n          street: 'Tallstrasse 13',\n          plz: '96047',\n          place: 'Bamberg',\n          tel: '0951000000',\n          mobile: '0873 376461',\n          fax: '040-999 8888',\n          email: 'Tall.Software@gmail.de'\n        },\n        {\n          id: 2,\n          companyname: 'Easy Hardware',\n          street: 'Nordweg 33',\n          plz: '14770',\n          place: 'Brandenburg',\n          tel: '0338100000',\n          mobile: '0929 123458',\n          fax: '040-999 7889',\n          email: 'Easy.Hardware@gmail.de'\n        }\n      ]);\n    } else {\n      return this.httpClient\n        .get<Deliverer[]>(environment.url + '/supplier/all')\n        .toPromise();\n    }\n  }\n\n  public addDeliverer(body: Deliverer): Promise<any> {\n    if (environment.isMock) {\n      return Promise.resolve();\n    } else {\n      return this.httpClient\n        .post<any>(environment.url + '/supplier/add', body)\n        .toPromise();\n    }\n  }\n\n  public deleteDeliverer(id: number): Promise<void> {\n    if (environment.isMock) {\n      return Promise.resolve();\n    } else {\n      return this.httpClient\n        .get<void>(environment.url + '/supplier/delete?id=' + id)\n        .toPromise();\n    }\n  }\n\n  public updateDeliverer(body: Deliverer): Promise<void> {\n    if (environment.isMock) {\n      return Promise.resolve();\n    } else {\n      return this.httpClient\n        .post<any>(environment.url + '/supplier/update', body)\n        .toPromise();\n    }\n  }\n\n  public getAllComponentAttributes(): Promise<DeviceAttribute[]> {\n    if (environment.isMock) {\n      return Promise.resolve([\n        {\n          id: 1,\n          bezeichnung: 'Seriennummer',\n        },\n        {\n          id: 2,\n          bezeichnung: 'RAM'\n        },\n        {\n          id: 3,\n          bezeichnung: 'CPU'\n        },\n        {\n          id: 4,\n          bezeichnung: 'Festplatte'\n        },\n        {\n          id: 5,\n          bezeichnung: 'Festplatten Typ'\n        },\n        {\n          id: 6,\n          bezeichnung: 'Grafikausgang'\n        },\n        {\n          id: 19,\n          bezeichnung: 'Versionsnummer'\n        },\n        {\n          id: 20,\n          bezeichnung: 'Lizenztyp'\n        },\n        {\n          id: 21,\n          bezeichnung: 'Lizenzanzahl'\n        },\n        {\n          id: 22,\n          bezeichnung: 'Lizenzlaufzeit'\n        },\n        {\n          id: 23,\n          bezeichnung: 'Lizenzinformationen'\n        },\n        {\n          id: 24,\n          bezeichnung: 'Installationshinweise'\n        },\n        {\n          id: 7,\n          bezeichnung: 'Anzahl Ports'\n        },\n        {\n          id: 8,\n          bezeichnung: 'Uplinktyp'\n        },\n        {\n          id: 9,\n          bezeichnung: 'IP'\n        },\n        {\n          id: 18,\n          bezeichnung: 'Anschlusstyp'\n        }\n      ]);\n    } else {\n      return this.httpClient\n        .get<DeviceAttribute[]>(environment.url + '/componentattribute/all')\n        .toPromise();\n    }\n  }\n\n  public addComponentAttribute(bez: string): Promise<void> {\n    if (environment.isMock) {\n      return Promise.resolve();\n    } else {\n      return this.httpClient\n        .post<any>(environment.url + '/componentattribute/add', { attribute: bez })\n        .toPromise();\n    }\n  }\n\n  public deleteComponentAttribute(id: number): Promise<void> {\n    if (environment.isMock) {\n      return Promise.resolve();\n    } else {\n      return this.httpClient\n        .get<void>(environment.url + '/componentattribute/delete?id=' + id)\n        .toPromise();\n    }\n  }\n\n  public getAllComponentType(): Promise<DeviceType[]> {\n    if (environment.isMock) {\n      return Promise.resolve([\n        {\n          id: 1,\n          bezeichnung: 'PC',\n          is_software: false,\n          attribute: [\n            {\n              id: 1,\n              bezeichnung: 'Seriennummer'\n            },\n            {\n              id: 2,\n              bezeichnung: 'RAM'\n            },\n            {\n              id: 3,\n              bezeichnung: 'CPU'\n            }\n          ]\n        },\n        {\n          id: 2,\n          bezeichnung: 'Switch',\n          is_software: false,\n          attribute: [\n            {\n              id: 1,\n              bezeichnung: 'Seriennummer'\n            },\n            {\n              id: 7,\n              bezeichnung: 'Anzahl Ports'\n            },\n            {\n              id: 8,\n              bezeichnung: 'Uplinktyp'\n            }\n          ]\n        },\n        {\n          id: 3,\n          bezeichnung: 'Router',\n          is_software: false,\n          attribute: [\n            {\n              id: 1,\n              bezeichnung: 'Seriennummer'\n            },\n            {\n              id: 7,\n              bezeichnung: 'Anzahl Ports'\n            },\n            {\n              id: 9,\n              bezeichnung: 'IP'\n            }\n          ]\n        },\n        {\n          id: 7,\n          bezeichnung: 'Visualizer',\n          is_software: false,\n          attribute: [\n            {\n              id: 1,\n              bezeichnung: 'Seriennummer'\n            },\n            {\n              id: 18,\n              bezeichnung: 'Anschlusstyp'\n            }\n          ]\n        },\n        {\n          id: 8,\n          bezeichnung: 'Software',\n          is_software: true,\n          attribute: [\n            {\n              id: 19,\n              bezeichnung: 'Versionsnummer'\n            },\n            {\n              id: 20,\n              bezeichnung: 'Lizenztyp'\n            },\n            {\n              id: 21,\n              bezeichnung: 'Lizenzanzahl'\n            },\n            {\n              id: 22,\n              bezeichnung: 'Lizenzlaufzeit'\n            },\n            {\n              id: 23,\n              bezeichnung: 'Lizenzinformationen'\n            },\n            {\n              id: 24,\n              bezeichnung: 'Installationshinweise'\n            }\n          ]\n        }\n      ]);\n    } else {\n      return this.httpClient\n        .get<DeviceType[]>(environment.url + '/componenttype/all')\n        .toPromise();\n    }\n  }\n\n  public deleteComponentType(id: number): Promise<void> {\n    if (environment.isMock) {\n      return Promise.resolve();\n    } else {\n      return this.httpClient\n        .get<void>(environment.url + '/componenttype/delete?id=' + id)\n        .toPromise();\n    }\n  }\n\n  public addNewComponentType(body: any): Promise<any> {\n    if (environment.isMock) {\n      return Promise.resolve();\n    } else {\n      return this.httpClient\n        .post<any>(environment.url + '/componenttype/add', body)\n        .toPromise();\n    }\n  }\n\n  public updateComponentType(body: any): Promise<any> {\n    if (environment.isMock) {\n      return Promise.resolve();\n    } else {\n      return this.httpClient\n        .post<any>(environment.url + '/componenttype/update', body)\n        .toPromise();\n    }\n  }\n\n  public getComponentById(id: number): Promise<Device> {\n    if (environment.isMock) {\n      return Promise.resolve({\n        id: 11,\n        bezeichnung: 'Computer',\n        raumId: 2,\n        lieferantId: 2,\n        einkaufsdatum: '2019-07-13',\n        geweahrleistungsdauer: 12,\n        notiz: 'Ein komischer Rechner',\n        hersteller: 'Apple',\n        belegId: 1234,\n        komponentenArtId: 1,\n        komponentenAttribute: [\n          { id: 2, value: '4GB RAM' },\n          { id: 1, value: '293474-34764' },\n          { id: 3, value: 'GTX 2070' }\n        ]\n      });\n    } else {\n      this.httpClient.get<Device>(environment.url + '/component/detail?id=' + id).toPromise();\n    }\n  }\n\n  public createNewComponent(body: Device): Promise<any> {\n    if (environment.isMock) {\n      return Promise.resolve({\n        id: Math.random() * 100\n      });\n    } else {\n      return this.httpClient.post(environment.url + '/component/add', body).toPromise();\n    }\n  }\n\n  public removeRoomsToSoftware(id: number): Promise<void> {\n    return this.httpClient.get<void>(environment.url + '/software/delete?id=' + id).toPromise();\n  }\n\n  public addSoftwareToRoom(body: any): Promise<void> {\n    return this.httpClient.post<void>(environment.url + '/software/add', body).toPromise();\n  }\n\n  public getAllRoomsToSoftware(id: number): Promise<any> {\n    return this.httpClient.get<any>(environment.url + '/software/all?id=' + id).toPromise();\n  }\n}\n"],"sourceRoot":""}